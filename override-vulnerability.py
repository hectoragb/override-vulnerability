#!/usr/bin/env python
# Override/hide vulnerabilities for a given component in the form component@componentVersion
# Hector Augusto Garcia Baleon <hbaleon@mirantis.com>

import sys
import re
import logging
import docker
import requests
import subprocess
import argparse
from logrusformatter import LogrusFormatter
import json
import base64
import urllib3

global cli
cli = docker.DockerClient(base_url='unix://var/run/docker.sock')

"""
Yes or no prompting
"""
def yes_no(question):
    yes = set(['yes','y'])
    no = set(['no','n'])
    prompt = " [Yes / No] "
    while True:
        print question + '?' + prompt
        choice = raw_input().lower()
        if choice == '':
            # If no choice is given, return no
            return False
        if choice in no:
            return False
        if choice in yes:
            return True
        else:
           print "\nPlease respond with 'yes' or 'no'"

"""
Check to ensure the dockerhubenterprise/rethinkcli non-interactive image is
present and obtainable
"""
def check_for_rethinkcli():
    # Check to see if dockerhubenterprise/rethinkcli:v2.2.0-ni is present by
    # pulling the image, if we can't fetch it assume disconnected.
    try:
        # Pull the image
        cli.images.pull("dockerhubenterprise/rethinkcli", tag="v2.2.0-ni")
    except docker.errors.APIError as e:
        logging.error("Unable to pull rethinkcli image: {0}".format(e))
        logging.info("Cannot continue without rethinkcli image -- If you are running in a disconnected environment please 'docker load' the dockerhubenterprise/rethinkcli:v2.2.0-ni image")
        sys.exit(1)
    except requests.exceptions.ConnectionError:
        logging.error("No docker socket found, was /var/run/docker.sock mounted?")
        sys.exit(1)

"""
Query rethinkdb in order to get the list of CVEs associated to a given component@componentVersion
"""
def overrideVulnerabilities(vul_to_override, dtr_host, username, password, do_list, do_override):
    logging.warn("Preparing to query rethinkdb for available vulnerabilities to overrride. Although this is not a potentially dangerous operation, please ensure you have performed a DTR backup before continuing.")
    if not yes_no("Are you sure you wish to continue"):
        logging.info("Exiting due to user input")
        sys.exit(1)    

    # Make sure the rethinkdb container is running prior to attempting to use it
    rethink_filter = {'name': 'dtr-rethinkdb'}
    try:
        api_container = cli.containers.list(filters=rethink_filter)[0]
    except IndexError:
        logging.error("Unable to continue: dtr-rethinkdb container not found, is DTR running correctly here?")
        sys.exit(1)

    # FIXME: This is hacky, use docker-py
    command = "r.db('dtr2').table('scanned_images')"
    dtr_replica_id = "docker ps -lf name='^/dtr-rethinkdb-.{12}$' --format '{{.Names}}' | cut -d- -f3"
    logging.debug("Issuing command: {0} on replica-id: {1}".format(command, dtr_replica_id))
    try:
        reql_result_tmp = subprocess.check_output("echo \"{0}\" | docker run -i --rm --net dtr-ol -e DTR_REPLICA_ID=$({1}) -v dtr-ca-$({1}):/ca dockerhubenterprise/rethinkcli:v2.2.0-ni non-interactive; echo".format(command, dtr_replica_id), shell=True)
    except subprocess.CalledProcessError as e:
        logging.error("Unable to clean: reql command failed: {0}".format(e))
    reql_result=json.loads(reql_result_tmp)

    logging.info("Starting to search into rethinkdb for possible vulnerabilities to override that match {0}...".format(vul_to_override))
    vul_list = []
    for scanned_image in reql_result:
        for component in scanned_image['components']:
            if vul_to_override == component['componentPK']:
                for CVE in component['cves']:
                    for layer in scanned_image['layers']:
                        for layer_component in layer['components']:
                            if vul_to_override == layer_component:
                                logging.info("Found candidate vulnerability ({0},{1},{2}:{4}) to override on layer {3}".format(component['componentPK'], CVE, scanned_image['repository'], layer['digest'],scanned_image['manifestDigest'][7:18]))
                                vul_list.append(component['componentPK'] + ',' + CVE + ',' + layer['digest'])

    # Remove duplicate vulnerabilities      
    logging.info("Removing duplicate vulnerability candidates...")
    vul_list = list(dict.fromkeys(vul_list))

    if do_list:    
        logging.info("Listing only the vulnerability available to override...")
        for x in range(len(vul_list)): 
            parameters = vul_list[x].split(',')
            logging.info("{0}/{1} Vulnerability ({2},{3},{4}) to override on layer {3}".format(x+1, len(vul_list), parameters[0], parameters[1], parameters[2]))

    if do_override: 
        auth = username + ":" + password
        auth_bytes = auth.encode('ascii')
        base64_bytes = base64.b64encode(auth_bytes)
        base64_auth = base64_bytes.decode('ascii')

        logging.info("Starting vulnerabilities overrides via API...")
        for x in range(len(vul_list)): 
            parameters = vul_list[x].split(',')
            component_ver = parameters[0].split('@')
            url = "https://" + dtr_host +"/api/v0/imagescan/layeroverride/" + parameters[2]
            payload = "{\"component\":\"" + component_ver[0] + "\",\"componentVersion\":\"" + component_ver[1] + "\",\"cve\":\"" + parameters[1] + "\"}"
            headers = {'Authorization' : 'Basic ' + base64_auth, 'Content-Type' : 'application/json'}
            logging.info("{4}/ {5} Attempting to override vulnerability ({0}@{1},{2}) on layer {3}".format(component_ver[0], component_ver[1], parameters[1], layer['digest'], x+1, len(vul_list)))
            response = requests.request("POST", url, headers=headers, data = payload, verify = False)
            if (response.status_code == 200):
                logging.info("status_code: {4}. Vulnerability ({0}@{1},{2}) on layer {3} successflly removed.".format(component_ver[0], component_ver[1], parameters[1], layer['digest'], response.status_code))
            else: 
                logging.warn("status_code: {4}. Unable to remove ({0}@{1},{2}) on layer {3} successflly removed.".format(component_ver[0], component_ver[1], parameters[1], layer['digest'], response.status_code))            

def main():
    urllib3.disable_warnings()

    # argument parsing
    parser = argparse.ArgumentParser(description='Override/hide vulnerabilities for a given component in the form component@componentVersion')
    parser.add_argument("--debug",
                        dest="debug",
                        action="store_true",
                        help="Enable debug logging")
    parser.add_argument("--no-image-check",
                        dest="no_image_check",
                        action="store_true",
                        help="Disable automatic image checking and pulling \
                        for the RethinkCLI image.")
    parser.add_argument("--list",
                        dest="list",
                        action="store_true",
                        help="List only the vulnerabilities to override.")
    parser.add_argument("--override",
                        dest="override",
                        action="store_true",
                        help="Override the vulnerabilities via API")
    parser.add_argument("-c", "--component", type=str, required=True, 
                        dest="vul_to_override",
                        help="Name and version of the vulnerability to override")  

    parser.add_argument("-u", "--username", type=str, required=True, 
                        dest="username",
                        help="Username to access DTR node")  

    parser.add_argument("-p", "--password", type=str, required=True, 
                        dest="password",
                        help="Pasword to access DTR node")  

    parser.add_argument("-n", "--node", type=str, required=True, 
                        dest="host",
                        help="DTR host to send API requests")  

    args = parser.parse_args()
    # basic logging that matches logrus format
    fmt_string = "%(levelname)s %(message)-20s"
    fmtr = LogrusFormatter(colorize=True, fmt=fmt_string)
    logger = logging.getLogger(name=None)
    if not args.debug:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.DEBUG)
    hdlr = logging.StreamHandler(sys.stdout)
    hdlr.setFormatter(fmtr)
    logger.addHandler(hdlr)
    # Check for a rethinkcli image
    if not args.no_image_check:
        check_for_rethinkcli()
    
    overrideVulnerabilities(args.vul_to_override, args.host, args.username, args.password, args.list, args.override)

    sys.exit(0)

"""
Main
"""
if __name__ == '__main__':
    sys.exit(main())